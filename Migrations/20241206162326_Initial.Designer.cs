// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RhinoTicketingSystem.Data;

#nullable disable

namespace RhinoTicketingSystem.Migrations
{
    [DbContext(typeof(db_a79800_ticketContext))]
    [Migration("20241206162326_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RhinoTicketingSystem.Models.DbA79800Ticket.OneDriveArchivingDetail", b =>
                {
                    b.Property<int>("ArchiveDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArchiveDetailId"));

                    b.Property<int>("ArchiveId")
                        .HasColumnType("int");

                    b.Property<string>("AttachedFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachedFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachedFileSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArchiveDetailId");

                    b.HasIndex("ArchiveId");

                    b.ToTable("OneDriveArchivingDetails", null, t =>
                        {
                            t.HasTrigger("OneDriveArchivingDetails_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.DbA79800Ticket.OneDriveArchivingHeader", b =>
                {
                    b.Property<int>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArchiveId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ArchiveId");

                    b.ToTable("OneDriveArchivingHeaders", null, t =>
                        {
                            t.HasTrigger("OneDriveArchivingHeaders_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.DbA79800Ticket.TblTicketattachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachedFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachedFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("attachedFileSize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Tbl_Ticketattachments", "dbo", t =>
                        {
                            t.HasTrigger("Tbl_Ticketattachments_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EngineerId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tasks", "dbo", t =>
                        {
                            t.HasTrigger("Tasks_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskStatuses", "dbo", t =>
                        {
                            t.HasTrigger("TaskStatuses_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes", "dbo", t =>
                        {
                            t.HasTrigger("TaskTypes_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Tbl_Categories", "dbo", t =>
                        {
                            t.HasTrigger("Tbl_Categories_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblChartOfAccount", b =>
                {
                    b.Property<int>("ChartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Chart_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChartId"));

                    b.Property<int?>("AccountLevel")
                        .HasColumnType("int")
                        .HasColumnName("Account_Level");

                    b.Property<string>("AccountingSerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccoutnType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Accoutn_Type");

                    b.Property<int?>("ChartCode")
                        .HasColumnType("int")
                        .HasColumnName("Chart_Code");

                    b.Property<string>("ChartFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChartName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Chart_Name");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialStatementClassificationGroupId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsConnectedWithBusinessType")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConnectedWithContact")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConnectedWithCostCenter")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConnectedWithProject")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsManualJournalNotAllowed")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Ob")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("OB");

                    b.Property<int?>("ParentAccount")
                        .HasColumnType("int");

                    b.HasKey("ChartId");

                    b.HasIndex("ParentAccount");

                    b.ToTable("Tbl_ChartOfAccounts", "dbo", t =>
                        {
                            t.HasTrigger("Tbl_ChartOfAccounts_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Center")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonnelNumber")
                        .HasColumnType("int");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tbl_Employees", "dbo", t =>
                        {
                            t.HasTrigger("Tbl_Employees_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblEngineer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EngEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EngineerCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tbl_Engineers", "dbo", t =>
                        {
                            t.HasTrigger("Tbl_Engineers_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblReassignTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EngineerId")
                        .HasColumnType("int");

                    b.Property<string>("ProblemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReassignedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReassignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReassignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EngineerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketId");

                    b.ToTable("Tbl_ReassignTicket", "dbo", t =>
                        {
                            t.HasTrigger("Tbl_ReassignTicket_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Tbl_Status", "dbo", t =>
                        {
                            t.HasTrigger("Tbl_Status_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblTaskDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EngineerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EngineerId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("taskStatus");

                    b.Property<int?>("TaskstatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineerId");

                    b.HasIndex("TaskId");

                    b.ToTable("TblTaskDetails", "dbo", t =>
                        {
                            t.HasTrigger("TblTaskDetails_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblTicket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttchedFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AttchedFileSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EngEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EngineerId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TicketDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngineerId");

                    b.ToTable("Tbl_Tickets", "dbo", t =>
                        {
                            t.HasTrigger("Tbl_Tickets_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.DbA79800Ticket.OneDriveArchivingDetail", b =>
                {
                    b.HasOne("RhinoTicketingSystem.Models.DbA79800Ticket.OneDriveArchivingHeader", "ArchiveHeader")
                        .WithMany("ArchiveDetails")
                        .HasForeignKey("ArchiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchiveHeader");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.DbA79800Ticket.TblTicketattachment", b =>
                {
                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TblTicket", "tblTickets")
                        .WithMany("TblTicketattachments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblTickets");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.Task", b =>
                {
                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TblEngineer", "TblEngineer")
                        .WithMany("Tasks")
                        .HasForeignKey("EngineerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TaskStatus", "TaskStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskType");

                    b.Navigation("TblEngineer");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblChartOfAccount", b =>
                {
                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TblChartOfAccount", "TblChartOfAccount1")
                        .WithMany("TblChartOfAccounts1")
                        .HasForeignKey("ParentAccount");

                    b.Navigation("TblChartOfAccount1");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblReassignTicket", b =>
                {
                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TblEngineer", "TblEngineer")
                        .WithMany("TblReassignTickets")
                        .HasForeignKey("EngineerId");

                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TblStatus", "TblStatus")
                        .WithMany("TblReassignTickets")
                        .HasForeignKey("StatusId");

                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TblTicket", "TblTicket")
                        .WithMany("TblReassignTickets")
                        .HasForeignKey("TicketId");

                    b.Navigation("TblEngineer");

                    b.Navigation("TblStatus");

                    b.Navigation("TblTicket");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblTaskDetail", b =>
                {
                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TblEngineer", "TblEngineer")
                        .WithMany("TblTaskDetails")
                        .HasForeignKey("EngineerId");

                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.Task", "Task")
                        .WithMany("TblTaskDetails")
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");

                    b.Navigation("TblEngineer");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblTicket", b =>
                {
                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TblCategory", "TblCategory")
                        .WithMany("TblTickets")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TblEmployee", "TblEmployee")
                        .WithMany("TblTickets")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RhinoTicketingSystem.Models.db_a79800_ticket.TblEngineer", "TblEngineer")
                        .WithMany("TblTickets")
                        .HasForeignKey("EngineerId");

                    b.Navigation("TblCategory");

                    b.Navigation("TblEmployee");

                    b.Navigation("TblEngineer");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.DbA79800Ticket.OneDriveArchivingHeader", b =>
                {
                    b.Navigation("ArchiveDetails");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.Task", b =>
                {
                    b.Navigation("TblTaskDetails");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TaskStatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TaskType", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblCategory", b =>
                {
                    b.Navigation("TblTickets");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblChartOfAccount", b =>
                {
                    b.Navigation("TblChartOfAccounts1");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblEmployee", b =>
                {
                    b.Navigation("TblTickets");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblEngineer", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("TblReassignTickets");

                    b.Navigation("TblTaskDetails");

                    b.Navigation("TblTickets");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblStatus", b =>
                {
                    b.Navigation("TblReassignTickets");
                });

            modelBuilder.Entity("RhinoTicketingSystem.Models.db_a79800_ticket.TblTicket", b =>
                {
                    b.Navigation("TblReassignTickets");

                    b.Navigation("TblTicketattachments");
                });
#pragma warning restore 612, 618
        }
    }
}
